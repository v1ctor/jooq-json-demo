/*
 * This file is generated by jOOQ.
 */
package org.buldakov.database.generated.tables


import org.buldakov.database.generated.Test
import org.buldakov.database.generated.keys.KEY_JSONPAYLOAD_PRIMARY
import org.buldakov.database.generated.tables.records.JsonPayloadRecord
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.JSON
import org.jooq.Name
import org.jooq.Record
import org.jooq.Row3
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class JsonPayloadTable(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, JsonPayloadRecord>?,
    aliased: Table<JsonPayloadRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<JsonPayloadRecord>(
    alias,
    Test.TEST,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>test.JsonPayload</code>
         */
        val JSONPAYLOAD: JsonPayloadTable = JsonPayloadTable()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<JsonPayloadRecord> = JsonPayloadRecord::class.java

    /**
     * The column <code>test.JsonPayload.name</code>.
     */
    val NAME: TableField<JsonPayloadRecord, String?> = createField(DSL.name("name"), SQLDataType.VARCHAR(127).nullable(false), this, "")

    /**
     * The column <code>test.JsonPayload.rules</code>.
     */
    val RULES: TableField<JsonPayloadRecord, JSON?> = createField(DSL.name("rules"), SQLDataType.JSON.nullable(false), this, "")

    /**
     * The column <code>test.JsonPayload.defaultValue</code>.
     */
    val DEFAULTVALUE: TableField<JsonPayloadRecord, Byte?> = createField(DSL.name("defaultValue"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.TINYINT)), this, "")

    private constructor(alias: Name, aliased: Table<JsonPayloadRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<JsonPayloadRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>test.JsonPayload</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>test.JsonPayload</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>test.JsonPayload</code> table reference
     */
    constructor(): this(DSL.name("JsonPayload"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, JsonPayloadRecord>): this(Internal.createPathAlias(child, key), child, key, JSONPAYLOAD, null)
    override fun getSchema(): Schema? = if (aliased()) null else Test.TEST
    override fun getPrimaryKey(): UniqueKey<JsonPayloadRecord> = KEY_JSONPAYLOAD_PRIMARY
    override fun `as`(alias: String): JsonPayloadTable = JsonPayloadTable(DSL.name(alias), this)
    override fun `as`(alias: Name): JsonPayloadTable = JsonPayloadTable(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): JsonPayloadTable = JsonPayloadTable(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): JsonPayloadTable = JsonPayloadTable(name, null)

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row3<String?, JSON?, Byte?> = super.fieldsRow() as Row3<String?, JSON?, Byte?>
}
